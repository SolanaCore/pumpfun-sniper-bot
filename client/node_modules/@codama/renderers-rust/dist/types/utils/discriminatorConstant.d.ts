import { DiscriminatorNode, InstructionArgumentNode, StructFieldTypeNode } from '@codama/nodes';
import { getTypeManifestVisitor } from '../getTypeManifestVisitor';
import { ImportMap } from '../ImportMap';
import { GetImportFromFunction } from './linkOverrides';
type Fragment = {
    imports: ImportMap;
    render: string;
};
export declare function getDiscriminatorConstants(scope: {
    discriminatorNodes: DiscriminatorNode[];
    fields: InstructionArgumentNode[] | StructFieldTypeNode[];
    getImportFrom: GetImportFromFunction;
    prefix: string;
    typeManifestVisitor: ReturnType<typeof getTypeManifestVisitor>;
}): Fragment;
export {};
//# sourceMappingURL=discriminatorConstant.d.ts.map