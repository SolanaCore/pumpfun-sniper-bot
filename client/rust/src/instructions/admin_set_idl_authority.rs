//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const ADMIN_SET_IDL_AUTHORITY_DISCRIMINATOR: [u8; 8] = [8, 217, 96, 231, 144, 104, 192, 5];

/// Accounts.
#[derive(Debug)]
pub struct AdminSetIdlAuthority {
      
              
          pub authority: solana_pubkey::Pubkey,
          
              
          pub global: solana_pubkey::Pubkey,
          
              
          pub idl_account: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
          
              
          pub program_signer: solana_pubkey::Pubkey,
          
              
          pub event_authority: solana_pubkey::Pubkey,
          
              
          pub program: solana_pubkey::Pubkey,
      }

impl AdminSetIdlAuthority {
  pub fn instruction(&self, args: AdminSetIdlAuthorityInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: AdminSetIdlAuthorityInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.global,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.idl_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program_signer,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&AdminSetIdlAuthorityInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::PUMP_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct AdminSetIdlAuthorityInstructionData {
            discriminator: [u8; 8],
            }

impl AdminSetIdlAuthorityInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [8, 217, 96, 231, 144, 104, 192, 5],
                                }
  }
}

impl Default for AdminSetIdlAuthorityInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct AdminSetIdlAuthorityInstructionArgs {
                  pub idl_authority: Pubkey,
      }


/// Instruction builder for `AdminSetIdlAuthority`.
///
/// ### Accounts:
///
                ///   0. `[signer]` authority
          ///   1. `[]` global
                ///   2. `[writable]` idl_account
                ///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
          ///   4. `[]` program_signer
          ///   5. `[]` event_authority
          ///   6. `[]` program
#[derive(Clone, Debug, Default)]
pub struct AdminSetIdlAuthorityBuilder {
            authority: Option<solana_pubkey::Pubkey>,
                global: Option<solana_pubkey::Pubkey>,
                idl_account: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                program_signer: Option<solana_pubkey::Pubkey>,
                event_authority: Option<solana_pubkey::Pubkey>,
                program: Option<solana_pubkey::Pubkey>,
                        idl_authority: Option<Pubkey>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl AdminSetIdlAuthorityBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            #[inline(always)]
    pub fn global(&mut self, global: solana_pubkey::Pubkey) -> &mut Self {
                        self.global = Some(global);
                    self
    }
            #[inline(always)]
    pub fn idl_account(&mut self, idl_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.idl_account = Some(idl_account);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn program_signer(&mut self, program_signer: solana_pubkey::Pubkey) -> &mut Self {
                        self.program_signer = Some(program_signer);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn idl_authority(&mut self, idl_authority: Pubkey) -> &mut Self {
        self.idl_authority = Some(idl_authority);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = AdminSetIdlAuthority {
                              authority: self.authority.expect("authority is not set"),
                                        global: self.global.expect("global is not set"),
                                        idl_account: self.idl_account.expect("idl_account is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                                        program_signer: self.program_signer.expect("program_signer is not set"),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = AdminSetIdlAuthorityInstructionArgs {
                                                              idl_authority: self.idl_authority.clone().expect("idl_authority is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `admin_set_idl_authority` CPI accounts.
  pub struct AdminSetIdlAuthorityCpiAccounts<'a, 'b> {
          
                    
              pub authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub global: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub idl_account: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub program_signer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `admin_set_idl_authority` CPI instruction.
pub struct AdminSetIdlAuthorityCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub global: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub idl_account: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub program_signer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: AdminSetIdlAuthorityInstructionArgs,
  }

impl<'a, 'b> AdminSetIdlAuthorityCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: AdminSetIdlAuthorityCpiAccounts<'a, 'b>,
              args: AdminSetIdlAuthorityInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              authority: accounts.authority,
              global: accounts.global,
              idl_account: accounts.idl_account,
              system_program: accounts.system_program,
              program_signer: accounts.program_signer,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.global.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.idl_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program_signer.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&AdminSetIdlAuthorityInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::PUMP_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.authority.clone());
                        account_infos.push(self.global.clone());
                        account_infos.push(self.idl_account.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.program_signer.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `AdminSetIdlAuthority` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` authority
          ///   1. `[]` global
                ///   2. `[writable]` idl_account
          ///   3. `[]` system_program
          ///   4. `[]` program_signer
          ///   5. `[]` event_authority
          ///   6. `[]` program
#[derive(Clone, Debug)]
pub struct AdminSetIdlAuthorityCpiBuilder<'a, 'b> {
  instruction: Box<AdminSetIdlAuthorityCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AdminSetIdlAuthorityCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(AdminSetIdlAuthorityCpiBuilderInstruction {
      __program: program,
              authority: None,
              global: None,
              idl_account: None,
              system_program: None,
              program_signer: None,
              event_authority: None,
              program: None,
                                            idl_authority: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn global(&mut self, global: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global = Some(global);
                    self
    }
      #[inline(always)]
    pub fn idl_account(&mut self, idl_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.idl_account = Some(idl_account);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn program_signer(&mut self, program_signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program_signer = Some(program_signer);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn idl_authority(&mut self, idl_authority: Pubkey) -> &mut Self {
        self.instruction.idl_authority = Some(idl_authority);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = AdminSetIdlAuthorityInstructionArgs {
                                                              idl_authority: self.instruction.idl_authority.clone().expect("idl_authority is not set"),
                                    };
        let instruction = AdminSetIdlAuthorityCpi {
        __program: self.instruction.__program,
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          global: self.instruction.global.expect("global is not set"),
                  
          idl_account: self.instruction.idl_account.expect("idl_account is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          program_signer: self.instruction.program_signer.expect("program_signer is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct AdminSetIdlAuthorityCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                global: Option<&'b solana_account_info::AccountInfo<'a>>,
                idl_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                program_signer: Option<&'b solana_account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        idl_authority: Option<Pubkey>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

