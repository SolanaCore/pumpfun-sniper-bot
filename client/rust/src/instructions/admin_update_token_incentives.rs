//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const ADMIN_UPDATE_TOKEN_INCENTIVES_DISCRIMINATOR: [u8; 8] = [209, 11, 115, 87, 213, 23, 124, 204];

/// Accounts.
#[derive(Debug)]
pub struct AdminUpdateTokenIncentives {
      
              
          pub authority: solana_pubkey::Pubkey,
          
              
          pub global: solana_pubkey::Pubkey,
          
              
          pub global_volume_accumulator: solana_pubkey::Pubkey,
          
              
          pub mint: solana_pubkey::Pubkey,
          
              
          pub global_incentive_token_account: solana_pubkey::Pubkey,
          
              
          pub associated_token_program: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
          
              
          pub event_authority: solana_pubkey::Pubkey,
          
              
          pub program: solana_pubkey::Pubkey,
      }

impl AdminUpdateTokenIncentives {
  pub fn instruction(&self, args: AdminUpdateTokenIncentivesInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: AdminUpdateTokenIncentivesInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(10+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.authority,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.global,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.global_volume_accumulator,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mint,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.global_incentive_token_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&AdminUpdateTokenIncentivesInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::PUMP_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct AdminUpdateTokenIncentivesInstructionData {
            discriminator: [u8; 8],
                                    }

impl AdminUpdateTokenIncentivesInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [209, 11, 115, 87, 213, 23, 124, 204],
                                                                                        }
  }
}

impl Default for AdminUpdateTokenIncentivesInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct AdminUpdateTokenIncentivesInstructionArgs {
                  pub start_time: i64,
                pub end_time: i64,
                pub seconds_in_a_day: i64,
                pub day_number: u64,
                pub pump_token_supply_per_day: u64,
      }


/// Instruction builder for `AdminUpdateTokenIncentives`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` authority
          ///   1. `[]` global
                ///   2. `[writable]` global_volume_accumulator
          ///   3. `[]` mint
                ///   4. `[writable]` global_incentive_token_account
                ///   5. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
                ///   6. `[optional]` system_program (default to `11111111111111111111111111111111`)
          ///   7. `[]` token_program
          ///   8. `[]` event_authority
          ///   9. `[]` program
#[derive(Clone, Debug, Default)]
pub struct AdminUpdateTokenIncentivesBuilder {
            authority: Option<solana_pubkey::Pubkey>,
                global: Option<solana_pubkey::Pubkey>,
                global_volume_accumulator: Option<solana_pubkey::Pubkey>,
                mint: Option<solana_pubkey::Pubkey>,
                global_incentive_token_account: Option<solana_pubkey::Pubkey>,
                associated_token_program: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                event_authority: Option<solana_pubkey::Pubkey>,
                program: Option<solana_pubkey::Pubkey>,
                        start_time: Option<i64>,
                end_time: Option<i64>,
                seconds_in_a_day: Option<i64>,
                day_number: Option<u64>,
                pump_token_supply_per_day: Option<u64>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl AdminUpdateTokenIncentivesBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            #[inline(always)]
    pub fn global(&mut self, global: solana_pubkey::Pubkey) -> &mut Self {
                        self.global = Some(global);
                    self
    }
            #[inline(always)]
    pub fn global_volume_accumulator(&mut self, global_volume_accumulator: solana_pubkey::Pubkey) -> &mut Self {
                        self.global_volume_accumulator = Some(global_volume_accumulator);
                    self
    }
            #[inline(always)]
    pub fn mint(&mut self, mint: solana_pubkey::Pubkey) -> &mut Self {
                        self.mint = Some(mint);
                    self
    }
            #[inline(always)]
    pub fn global_incentive_token_account(&mut self, global_incentive_token_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.global_incentive_token_account = Some(global_incentive_token_account);
                    self
    }
            /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
#[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn start_time(&mut self, start_time: i64) -> &mut Self {
        self.start_time = Some(start_time);
        self
      }
                #[inline(always)]
      pub fn end_time(&mut self, end_time: i64) -> &mut Self {
        self.end_time = Some(end_time);
        self
      }
                #[inline(always)]
      pub fn seconds_in_a_day(&mut self, seconds_in_a_day: i64) -> &mut Self {
        self.seconds_in_a_day = Some(seconds_in_a_day);
        self
      }
                #[inline(always)]
      pub fn day_number(&mut self, day_number: u64) -> &mut Self {
        self.day_number = Some(day_number);
        self
      }
                #[inline(always)]
      pub fn pump_token_supply_per_day(&mut self, pump_token_supply_per_day: u64) -> &mut Self {
        self.pump_token_supply_per_day = Some(pump_token_supply_per_day);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = AdminUpdateTokenIncentives {
                              authority: self.authority.expect("authority is not set"),
                                        global: self.global.expect("global is not set"),
                                        global_volume_accumulator: self.global_volume_accumulator.expect("global_volume_accumulator is not set"),
                                        mint: self.mint.expect("mint is not set"),
                                        global_incentive_token_account: self.global_incentive_token_account.expect("global_incentive_token_account is not set"),
                                        associated_token_program: self.associated_token_program.unwrap_or(solana_pubkey::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                                        token_program: self.token_program.expect("token_program is not set"),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = AdminUpdateTokenIncentivesInstructionArgs {
                                                              start_time: self.start_time.clone().expect("start_time is not set"),
                                                                  end_time: self.end_time.clone().expect("end_time is not set"),
                                                                  seconds_in_a_day: self.seconds_in_a_day.clone().expect("seconds_in_a_day is not set"),
                                                                  day_number: self.day_number.clone().expect("day_number is not set"),
                                                                  pump_token_supply_per_day: self.pump_token_supply_per_day.clone().expect("pump_token_supply_per_day is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `admin_update_token_incentives` CPI accounts.
  pub struct AdminUpdateTokenIncentivesCpiAccounts<'a, 'b> {
          
                    
              pub authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub global: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub global_volume_accumulator: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub mint: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub global_incentive_token_account: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `admin_update_token_incentives` CPI instruction.
pub struct AdminUpdateTokenIncentivesCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub global: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub global_volume_accumulator: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub mint: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub global_incentive_token_account: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: AdminUpdateTokenIncentivesInstructionArgs,
  }

impl<'a, 'b> AdminUpdateTokenIncentivesCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: AdminUpdateTokenIncentivesCpiAccounts<'a, 'b>,
              args: AdminUpdateTokenIncentivesInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              authority: accounts.authority,
              global: accounts.global,
              global_volume_accumulator: accounts.global_volume_accumulator,
              mint: accounts.mint,
              global_incentive_token_account: accounts.global_incentive_token_account,
              associated_token_program: accounts.associated_token_program,
              system_program: accounts.system_program,
              token_program: accounts.token_program,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(10+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.authority.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.global.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.global_volume_accumulator.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.global_incentive_token_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&AdminUpdateTokenIncentivesInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::PUMP_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.authority.clone());
                        account_infos.push(self.global.clone());
                        account_infos.push(self.global_volume_accumulator.clone());
                        account_infos.push(self.mint.clone());
                        account_infos.push(self.global_incentive_token_account.clone());
                        account_infos.push(self.associated_token_program.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `AdminUpdateTokenIncentives` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` authority
          ///   1. `[]` global
                ///   2. `[writable]` global_volume_accumulator
          ///   3. `[]` mint
                ///   4. `[writable]` global_incentive_token_account
          ///   5. `[]` associated_token_program
          ///   6. `[]` system_program
          ///   7. `[]` token_program
          ///   8. `[]` event_authority
          ///   9. `[]` program
#[derive(Clone, Debug)]
pub struct AdminUpdateTokenIncentivesCpiBuilder<'a, 'b> {
  instruction: Box<AdminUpdateTokenIncentivesCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AdminUpdateTokenIncentivesCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(AdminUpdateTokenIncentivesCpiBuilderInstruction {
      __program: program,
              authority: None,
              global: None,
              global_volume_accumulator: None,
              mint: None,
              global_incentive_token_account: None,
              associated_token_program: None,
              system_program: None,
              token_program: None,
              event_authority: None,
              program: None,
                                            start_time: None,
                                end_time: None,
                                seconds_in_a_day: None,
                                day_number: None,
                                pump_token_supply_per_day: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn global(&mut self, global: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global = Some(global);
                    self
    }
      #[inline(always)]
    pub fn global_volume_accumulator(&mut self, global_volume_accumulator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global_volume_accumulator = Some(global_volume_accumulator);
                    self
    }
      #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint = Some(mint);
                    self
    }
      #[inline(always)]
    pub fn global_incentive_token_account(&mut self, global_incentive_token_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global_incentive_token_account = Some(global_incentive_token_account);
                    self
    }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn start_time(&mut self, start_time: i64) -> &mut Self {
        self.instruction.start_time = Some(start_time);
        self
      }
                #[inline(always)]
      pub fn end_time(&mut self, end_time: i64) -> &mut Self {
        self.instruction.end_time = Some(end_time);
        self
      }
                #[inline(always)]
      pub fn seconds_in_a_day(&mut self, seconds_in_a_day: i64) -> &mut Self {
        self.instruction.seconds_in_a_day = Some(seconds_in_a_day);
        self
      }
                #[inline(always)]
      pub fn day_number(&mut self, day_number: u64) -> &mut Self {
        self.instruction.day_number = Some(day_number);
        self
      }
                #[inline(always)]
      pub fn pump_token_supply_per_day(&mut self, pump_token_supply_per_day: u64) -> &mut Self {
        self.instruction.pump_token_supply_per_day = Some(pump_token_supply_per_day);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = AdminUpdateTokenIncentivesInstructionArgs {
                                                              start_time: self.instruction.start_time.clone().expect("start_time is not set"),
                                                                  end_time: self.instruction.end_time.clone().expect("end_time is not set"),
                                                                  seconds_in_a_day: self.instruction.seconds_in_a_day.clone().expect("seconds_in_a_day is not set"),
                                                                  day_number: self.instruction.day_number.clone().expect("day_number is not set"),
                                                                  pump_token_supply_per_day: self.instruction.pump_token_supply_per_day.clone().expect("pump_token_supply_per_day is not set"),
                                    };
        let instruction = AdminUpdateTokenIncentivesCpi {
        __program: self.instruction.__program,
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          global: self.instruction.global.expect("global is not set"),
                  
          global_volume_accumulator: self.instruction.global_volume_accumulator.expect("global_volume_accumulator is not set"),
                  
          mint: self.instruction.mint.expect("mint is not set"),
                  
          global_incentive_token_account: self.instruction.global_incentive_token_account.expect("global_incentive_token_account is not set"),
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct AdminUpdateTokenIncentivesCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                global: Option<&'b solana_account_info::AccountInfo<'a>>,
                global_volume_accumulator: Option<&'b solana_account_info::AccountInfo<'a>>,
                mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                global_incentive_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        start_time: Option<i64>,
                end_time: Option<i64>,
                seconds_in_a_day: Option<i64>,
                day_number: Option<u64>,
                pump_token_supply_per_day: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

